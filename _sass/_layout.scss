$size-names: normal, flow;
$size-upper-limit: 10000px, 670px;
$size-page-width: 625px, auto;
$size-column-width: 290px, 100%;
$size-gutter-width: 45px, 0px;

@function upper-limit($size) {
  @return nth($size-upper-limit, index($size-names, $size));
}

@function page-width($size) {
  @return nth($size-page-width, index($size-names, $size));
}

@function column-width($size) {
  @return nth($size-column-width, index($size-names, $size));
}

@function gutter-width($size) {
  @return nth($size-gutter-width, index($size-names, $size));
}

@function column-width-n($size, $columns: 1) {
  @if $size == flow {
    @return column_width($size);
  } @else {
    @return column_width($size) + (column-width($size) + gutter-width($size))
                                * ($columns - 1);
  }
}

@function column-offset($size, $column) {
  @return gutter-width($size) + (column-width($size) + gutter-width($size))
                              * $column;
}

.row {
  @include clearfix;
  margin-left: (-(gutter-width(normal)));
  padding-bottom: 2.5em;

  @media (max-width: upper-limit(flow)) {
    margin-left: -(gutter-width(flow));
  }

  &:first-child {
    padding-top: 2.5em;
  }
}

@mixin column {
  float: left;
  margin-left: gutter-width(normal);

  @media (max-width: upper-limit(flow)) {
    margin-left: gutter-width(flow);
  }
}

@for $i from 1 through 3 {
  .column-#{$i} {
    @include column;
    width: column-width-n(normal, $i);

    @media (max-width: upper-limit(flow)) {
      @include clearfix;
      margin-bottom: 3.5em;
      width: column-width-n(flow, $i);

      &:last-child {
        margin-bottom: 0;
      }
    }
  }
}

@for $i from 1 through 2 {
  .offset-#{$i} {
    margin-left: column-offset(normal, $i);

    @media (max-width: upper-limit(flow)) {
      margin-left: 0;
    }
  }
}

@mixin center {
  margin-left: auto;
  margin-right: auto;
}

.container {
  @include center;
  width: page-width(normal);

  @media (max-width: upper-limit(flow)) {
    width: page-width(flow);
    margin: 0 30px;
  }
}
